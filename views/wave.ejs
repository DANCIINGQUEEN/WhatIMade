<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <title></title>
    <!-- <link rel="stylesheet" href="style.css" type="text/css"> -->
    <style>
        *{
    user-select: none;
    -ms-user-select: none;
    outline: 0;
    margin:0;
    padding: 0;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}
html{
    width: 100%;
    height: 100%;
}
body{
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color:#ffffff;
}
canvas{width: 100%; height: 100%;}
    </style>
</head>

<body>
    <!-- <script type="module" src="app.js"></script> -->
    <script>
        class App {
            constructor() {
                this.canvas = document.createElement("canvas")
                this.ctx = this.canvas.getContext('2d')
                document.body.appendChild(this.canvas)

                this.waveGroup = new WaveGroup()

                window.addEventListener('resize', this.resize.bind(this), false)
                this.resize()

                requestAnimationFrame(this.animate.bind(this))
            }
            resize() {
                this.stageWidth = document.body.clientWidth
                this.stageHeight = document.body.clientHeight

                this.canvas.width = this.stageWidth * 2
                this.canvas.height = this.stageHeight * 2
                this.ctx.scale(2, 2)

                this.waveGroup.resize(this.stageWidth, this.stageHeight)
            }
            animate(t) {
                this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight)

                this.waveGroup.draw(this.ctx)
                requestAnimationFrame(this.animate.bind(this))
            }
        }
        window.onload = () => {
            new App()
        }
        class Point {
            constructor(index, x, y) {
                this.x = x
                this.y = y
                this.fixedY = y
                this.speed = 0.1
                this.cur = index
                this.max = Math.random() * 100 + 150
            }
            update() {
                this.cur += this.speed
                this.y = this.fixedY + (Math.sin(this.cur) * this.max)

            }
        }
        class Wave {
            constructor(index, totalPoints, color) {
                this.index = index
                this.totalPoints = totalPoints
                this.color = color
                this.points = []
            }
            resize(stageWidth, stageHeight) {
                this.stageWidth = stageWidth
                this.stageHeight = stageHeight

                this.centerX = stageWidth / 2
                this.centerY = stageHeight / 2

                this.poinGap = this.stageWidth / (this.totalPoints - 1)

                this.init()
            }
            init() {
                this.points = []
                for (let i = 0; i < this.totalPoints; i++) {
                    const point = new Point(
                        this.index + i,
                        this.poinGap * i,
                        this.centerY
                    )
                    this.points[i] = point

                }
            }
            draw(ctx) {
                ctx.beginPath()
                ctx.fillStyle = this.color

                let prevX = this.points[0].x
                let prevY = this.points[0].y

                ctx.moveTo(prevX, prevY)

                for (let i = 1; i < this.totalPoints; i++) {
                    if (i < this.totalPoints - 1) {
                        this.points[i].update()
                    }
                    const cx = (prevX + this.points[i].x) / 2
                    const cy = (prevY + this.points[i].y) / 2

                    ctx.quadraticCurveTo(prevX, prevY, cx, cy)

                    prevX = this.points[i].x
                    prevY = this.points[i].y
                }

                ctx.lineTo(prevX, prevY)
                ctx.lineTo(this.stageWidth, this.stageHeight)
                ctx.lineTo(this.points[0].x, this.stageHeight)
                ctx.fill()
                ctx.closePath()


            }
        }
        class WaveGroup {
            constructor() {
                this.totalWaves = 3
                this.totalPoints = 6

                this.color = ['rgba(255,0,0,0.4)', 'rgba(255,255,0,0.4)', 'rgba(0,255,255,0.4)']

                this.waves = []

                for (let i = 0; i < this.totalWaves; i++) {
                    const wave = new Wave(
                        i,
                        this.totalPoints,
                        this.color[i],
                    )
                    this.waves[i] = wave
                }
            }
            resize(stageWidth, stageHeight) {
                for (let i = 0; i < this.totalWaves; i++) {
                    const wave = this.waves[i]
                    wave.resize(stageWidth, stageHeight)
                }
            }
            draw(ctx) {
                for (let i = 0; i < this.totalWaves; i++) {
                    const wave = this.waves[i]
                    wave.draw(ctx)
                }
            }
        }
    </script>
</body>

</html>